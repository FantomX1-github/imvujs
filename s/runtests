#!/bin/bash

HERE=`dirname "$0"`

NODEJS="$HERE/node"
JSHINT="$HERE/../third-party/node-jshint/bin/jshint"

function fail() {
    printf "\nFailed\n"
    exit 1
}

function succeed() {
    printf "\nSuccess!\n"
    exit 0
}

function run_jshint() {
    echo "Running jshint..."

    "$NODEJS" "$JSHINT" "$HERE/../src" "$HERE/../fakes" "$HERE/../bin" || fail
}

function run_node_tests() {
    local TESTS=`find "$HERE/../fakes" "$HERE/../src" "$HERE/../tests" -type f -iname '*.test.js' $TESTMASK`
    if [ "${#TESTS}" != 0 ]; then
        echo "Running node tests..."
        "$HERE"/../bin/test --superfixture "$HERE/../tests/superfixture.js" $TESTS || fail
    fi
}

function launch_server() {
    cd "$HERE"/..
    python -m SimpleHTTPServer 8001 >/dev/null 2>&1 &
    echo "Launched server."

    SERVER_PID="$!"
    cd - > /dev/null
    type -P nc 2>&1 >/dev/null || {
        echo "nc command not found"
        echo "If using Cygwin, please install the nc package."
        fail
    }

    while true; do
        nc -n 127.0.0.1 8001 < /dev/null
        if [ $? -eq 0 ]; then
            break
        fi
    done

    function cleanup_server() {
        if [ "$SERVER_PID" ]; then
            kill -TERM $SERVER_PID 2> /dev/null
            wait $SERVER_PID 2> /dev/null
            echo "Tore down server."
        fi
    }
    trap cleanup_server EXIT

    return 0
}

function run_browser_tests() {
    local TESTS=`find "$HERE/.." -type f -iname '*.domtest.js' $TESTMASK`

    run_leprechaun "http://127.0.0.1:8001/bin/test-trampoline.html" "$TESTS"

    if [ "$?" != 0 ]; then
        fail
    fi
}

function run_leprechaun() {
    local TRAMPOLINE="$1"
    local TESTS="$2"
    if [ "${#TESTS}" != 0 ]; then
        printf "\nRunning browser tests...\n\n"

        OS=`python -c "import sys; print sys.platform"`
        RUNNER="http://127.0.0.1:8001/bin/leprechaun-runner.js"
        OPTIONS=""
        if [ $OS = 'darwin' ]; then
            LEPRECHAUN="$HERE/../third-party/leprechaun-binaries/leprechaun.app/Contents/MacOS/leprechaun"
        elif [ $OS = 'linux2' ]; then
            export LD_LIBRARY_PATH="$HERE/../third-party/leprechaun-binaries/linux"
            LEPRECHAUN="$HERE/../third-party/leprechaun-binaries/linux/leprechaun"
            LEPRECHAUN_OPTIONS="--disable-gpu --disable-setuid-sandbox"
        elif [ $OS = 'cygwin' ]; then
            LEPRECHAUN="$HERE/../third-party/leprechaun-binaries/windows/leprechaun.exe"
        fi

        DISPLAY=:9.0 "$LEPRECHAUN" $LEPRECHAUN_OPTIONS $RUNNER $TRAMPOLINE $TESTS
        return "$?"
    fi
}

function run_browser_async_tests() {
    local TESTS=`find "$HERE/.." -type f -iname "*.async-test.js" $TESTMASK`

    run_leprechaun "http://127.0.0.1:8001/bin/async-test-trampoline.html" "$TESTS"

    if [ "$?" != 0 ]; then
        fail
    fi
}

function run_fail_tests() {
    local EXPECTED_FAILS=`find "$HERE/../tests" -type f -iname '*.fail.js' $TESTMASK`
    if [ "${#EXPECTED_FAILS}" != 0 ]; then
        printf "\nRunning failure tests...\n\n"
        for expected in $EXPECTED_FAILS; do
            echo $expected ...
            "$HERE"/../bin/test --superfixture "$HERE/../tests/superfixture.js" $expected > /dev/null
            if [ "$?" = 0 ]; then
                echo "$expected passed incorrectly"
                fail
            fi
        done
    fi
}


TESTMASK=""
if [ "$@" ]; then
    TESTMASK="-path $HERE/../$@"
fi

run_jshint
"$HERE"/build
run_node_tests
launch_server
run_browser_tests
run_browser_async_tests
run_fail_tests


succeed
